#Written by Gary Zeri
#Member of the LaRue CatLab at Chapman University

#Graphable Abstract class to provide a common interface for all graphable objects in the CompChem Library

from abc import ABC, abstractmethod
from compChemGlobal import plot

class Graphable(ABC):
    
    #Declare all global variables here that should be modified in the child class 
    #to better reflect the actual titles
    graphTitle = "Generic & Unoriginal Graph Name"
    xTitle = "x"
    yTitle = "y"
    start = 0 
    end = 5
    precision = 2
    resolution = 100
    graphableObjects = []
    graphableData = []

    #Provide appropriate values for the global variables here in the child class
    @abstractmethod
    def __init__(self):
        
        #add in all objects that are graphable to this list in order to add their graphs to the graph  generated by this object
        #Need to make sure to clear this in the init in the child class
        self.graphableObjects = []
        self.graphableData = []
        
        #To signify if the child object has raw x,y data to graph or is a callable function to graph
        
        self.graphTitle = "Title"
        self.xTitle = "x"
        self.yTitle = "y"
        self.start = 0
        self.end = 0 
        self.precision = 2
        self.resolution = 100
    
###################################################################################

    #compute method that must be somewhere in the parent class in order to allow for graphing to occur
    @abstractmethod
    def compute(self, r):
        pass

###################################################################################

    #method to return a list of widgets for this graphable object
    #if the graphable object should not have any widgets, then implement to return false
    @abstractmethod
    def getWidgets(self):
        return False
    
###################################################################################

    #showGraph: if True, graph wil be generated, if False, graph trace will be returned instead
    #rawData: if True, dictionary of x,y data will be returned instead
    def graph(self, showGraph=True, resolution=None, start=None, end=None, precision=None):
        
        if(resolution == None):
            resolution = self.resolution 
        if(start == None):
            start = self.start
        if(end == None):
            end = self.end
        if(precision == None):
            precision = self.precision
            
        trace = plot.graphFunction(self.compute, title=self.graphTitle, resolution=resolution, 
                                   start=start, end=end, precision=precision, 
                                   xTitle=self.xTitle, yTitle=self.yTitle)

        if(not showGraph):
            return trace
                
        self.buildGraph(trace)
        
###################################################################################

    #This is a private function that should not be overriden in the child class
    def buildGraph(self, trace):

        data, functions, widgets = self.getGraphData(trace, self.compute)
         
        fig = plot.go.FigureWidget(layout = dict( xaxis_title = self.xTitle, 
                                                  yaxis_title = self.yTitle, 
                                                  title_text = self.graphTitle
                                                ), 
                                   data = data
                                  )
        
        widgetData = plot.getGraphFunctionWidgets(fig, fig.data, functions, resolution=self.resolution, 
                                             start=self.start, end=self.end, precision=self.precision, returnWidgets=True, graphableData=len(self.graphableData))
        graph = widgetData[0]
        self.parentWidgets = widgetData[1]
   
        for index, widgetList in enumerate(widgets):
            if(widgetList == False):
                continue
            
            graph.children[index].children += tuple(widgetList)
                
        display(graph)
        
###################################################################################

    #This is private function that should not be overriden in the child class
    def getGraphData(self, trace, function):
        traces = [trace]
        functions = [function]
        widgets = []
                                   
        for graphableObject in self.graphableObjects:
            
            traces.append(graphableObject.graph(showGraph=False))
            functions.append(graphableObject.compute)
            widgets.append(graphableObject.getWidgets())

        traces.extend(self.graphableData)
        return (traces, functions, widgets)
    
###################################################################################

    def addGraphableObject(self, graphableObject):
        graphableObjects = [graphableObject]
        graphableObjects.extend(self.graphableObjects)
        self.graphableObjects = graphableObjects
        
###################################################################################

    def addGraphableData(self, graphableData, title):
        graphableData = [plot.buildTrace(x=graphableData["x"], y=graphableData["y"], title=title, 
                                                  precision=self.precision, xTitle=self.xTitle, 
                                                  yTitle=self.yTitle, mode="markers")]
        graphableData.extend(self.graphableData)
        self.graphableData = graphableData